@{
    ViewData["Title"] = "Pdf to Excel";
}

<script type="text/javascript">
    function onError(e) {
        // An array with information about the uploaded files
        var files = e.files;

        if (e.operation == "upload") {
            alert("Failed to upload " + files.length + " files");
        }
    }

    function btnShowDebugInfoClick(e) {

        var jqxhr = $.ajax("/Home/DebugInfo")
            .done(function (text) {
                $("#divDebugInfo")
                    .show()
                    .html(text);
            });
    }


</script>
@(Html.Kendo().Menu()
          .Name("Menu")
          .Items(items =>
          {
              items.Add().Text("Home").Url("#Menu");
              items.Add().Text("Convert").Url("#divConvert");
              items.Add().Text("Files").Url("#divFiles"); ;
              items.Add().Text("Mappings").Url("#divMappings"); ;
          }
          )
          .Deferred()
)

<br />
<div id="divConvert" class="k-block">
    <div class="k-header k-success-colored">1. Please upload a pdf file and click 'Download Excel' button.</div>
    <div class="k-block k-info-colored">
        <form method="post" action='@Url.Action("Submit")'>
            <div class="demo-section k-content">
                @(Html.Kendo().Upload()
            .Name("files")
            .HtmlAttributes(new { accept = "*.pdf" })
            .Multiple(false)
            .ShowFileList(true)
            .Async(a => a
                .Save("ChunkSave", "Upload")
                .Remove("Remove", "Upload")
            )
            .Validation(v => v.AllowedExtensions("pdf"))
            .Events(e => e.Error("onError"))
            .Deferred()
                )
                <hr />
                <a asp-controller="Upload" class="k-button"
                   asp-action="Excel">Download Excel</a>
            </div>
        </form>
    </div>
</div>
<br />
@*@(Html.Kendo().Button().Name("btnShowDebugInfo").Content("Show Info").Events(e => e.Click("btnShowDebugInfoClick"))
        .Deferred()
        )
    <div id="divDebugInfo" style="display:none">

    </div>*@
<div id="divFiles" class="k-block">
    <div class="k-header k-success-colored">2. Download or delete already uploaded files.</div>

    @(Html.Kendo().Grid<AzureCloudFileViewModel>()
            .Name("gridFs")
            .Columns(columns =>
            {
                columns.Bound(c => c.DirectoryName).Width(50).Title("Company");
                columns.Bound(c => c.FileName).Width(100).Title("File");
                columns.Bound(c => c.Extension).Width(20);
                columns.Bound(c => c.Length).Width(30);
                columns.Command(command => command.Destroy()).Width(50).Title("Delete");
                columns.Template("<a href='/Grid/Download/?safeUri=#:SafeUri#' class='k-button'>Download</a>").Width(100).Title("Download");
            })
            .Groupable()
            .Sortable()
            .Filterable()
            .Resizable(r => r.Columns(true))
            .Excel(excel => excel
        .FileName("Files.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Export", "Grid"))
    )
    .Pdf(p =>
          {
          p.ProxyURL(Url.Action("Export", "Grid"));
         })
            .ToolBar(t =>
            {
                t.Excel();
                t.Pdf();
            })
            .Pageable(s => s.Refresh(true))

            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("AzureFiles_Read", "Grid"))
                .Destroy(destroy => destroy.Action("AzureFiles_Destroy", "Grid"))
                .PageSize(2000)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(f => f.Uri);
                })
            )
            .Deferred()
    )
</div>
<br />
<div id="divMappings" class="k-block">
    <div class="k-header k-success-colored">3. Mappings.</div>
    @(Html.Kendo().Grid<FinancialRow>()
                    .Name("gridBs")
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.Number).Width(50);
                        columns.Bound(c => c.Name).Width(100);
                        columns.Bound(c => c.GoesToRowNumberString).Width(50).Title("Goes To");
                        columns.Bound(c => c.GoesToRowTitle).Width(100).Title("Goes To Title");
                        columns.Bound(c => c.Sign).Width(50);
                        //columns.Bound(c => c.CurrentYear).Width(50);
                    })
                    .Groupable()
                    .Sortable()
                    .Filterable()
                                   .Excel(excel => excel
                                   .FileName("Files.xlsx")
                                   .Filterable(true)
                                   .ProxyURL(Url.Action("Export", "Grid")))
                                   .Pdf(p =>
                                   {
                                       p.ProxyURL(Url.Action("Export", "Grid"));
                                   })
            .ToolBar(t =>
            {
                t.Excel();
                t.Pdf();
            })
            .Pageable(s => s.Refresh(true))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("BsRows_Read", "Grid"))
                .PageSize(2000)
                .ServerOperation(false)
            )
            .Deferred()
    )
</div>
