@{
    ViewData["Title"] = "Pdf to Excel";
}

<script type="text/javascript">
    function onError(e) {
        // An array with information about the uploaded files
        var files = e.files;

        if (e.operation == "upload") {
            alert("Failed to upload " + files.length + " files");
        }
    }

    function btnShowDebugInfoClick(e) {

        var jqxhr = $.ajax("/Home/DebugInfo")
            .done(function (text) {
                $("#divDebugInfo")
                    .show()
                    .html(text);
            });
    }


</script>

<div class="k-block k-info-colored">Please upload INPUT EXAMPLE 1.pdf and click 'Download Excel' button.</div>
<hr />

<form method="post" action='@Url.Action("Submit")'>
    <div class="demo-section k-content">
        @(Html.Kendo().Upload()
            .Name("files")
            .HtmlAttributes(new { accept = "*.pdf" })
            .Multiple(false)
            .ShowFileList(true)
            .Async(a => a
                .Save("ChunkSave", "Upload")
                .Remove("Remove", "Upload")
            )
            .Validation(v => v.AllowedExtensions("pdf"))
            .Events(e => e.Error("onError"))
            .Deferred()
        )
        <hr />
        <a asp-controller="Upload" class="k-button"
           asp-action="Excel">Download Excel</a>

     
    </div>
</form>
<hr />
@*@(Html.Kendo().Button().Name("btnShowDebugInfo").Content("Show Info").Events(e => e.Click("btnShowDebugInfoClick"))
    .Deferred()
    )
<div id="divDebugInfo" style="display:none">
   
</div>*@

@(Html.Kendo().Grid<AzureCloudFileViewModel>()
            .Name("gridFs")
            .Columns(columns =>
            {
                columns.Bound(c => c.DirectoryName).Width(50);
                columns.Bound(c => c.FileName).Width(100);
                columns.Bound(c => c.Extension).Width(50);
                columns.Bound(c => c.Length).Width(100);
                columns.Command(command => command.Destroy()).Width(150);
            })
            .Groupable()
            .Sortable()
            .Filterable()
            .ToolBar(t =>
            {
                t.Excel();
                t.Pdf();
            })
            .Pageable(s => s.Refresh(true))

            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("AzureFiles_Read", "Grid"))
                .Destroy(destroy => destroy.Action("AzureFiles_Destroy", "Grid"))
                .PageSize(2000)
                .ServerOperation(false)
                .Model(model =>
                {
                    model.Id(f => f.Uri);
                })
            )
            .Deferred()
)
<hr />
@(Html.Kendo().Grid<FinancialRow>()
            .Name("gridBs")
            .Columns(columns =>
            {
                columns.Bound(c => c.Number).Width(50);
                columns.Bound(c => c.Name).Width(100);
                columns.Bound(c => c.GoesToRowNumber).Width(50);
                columns.Bound(c => c.GoesToRowTitle).Width(100);
                columns.Bound(c => c.CurrentYear).Width(50);
            })
            .Groupable()
            .Sortable()
            .Filterable()
            .ToolBar(t =>
            {
                t.Excel();
                t.Pdf();                
            })
            .Pageable(s => s.Refresh(true))

            .DataSource(dataSource => dataSource
                .Ajax()

                .Read(read => read.Action("BsRows_Read", "Grid"))
                .PageSize(2000)
                .ServerOperation(false)
            )
            .Deferred()
)
