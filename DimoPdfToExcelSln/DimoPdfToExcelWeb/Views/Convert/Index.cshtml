@{
    ViewData["Title"] = "Pdf to Excel";
}
@Html.Partial("_CssPartial")
@section Scripts{

    @Html.Partial("_JsPartial")
}
<script type="text/javascript">
    function onError(e) {
        var files = e.files;

        if (e.operation == "upload") {
            kendo.alert("Failed to upload " + files.length + " files");
        }
    }

    function btnShowDebugInfoClick(e) {

        var jqxhr = $.ajax("/Home/DebugInfo")
            .done(function (text) {
                $("#divDebugInfo")
                    .show()
                    .html(text);
            });
    }

    function DownloadExcelClick(e) {
        var upload = $("#singleFile").data("kendoUpload"),
            files = upload.getFiles();

        if (files.length == 0) {
            e.preventDefault();
            kendo.alert("You should upload a file first!");
        }
        else {

            $.ajax({
                url: "upload/excel", success: function (url) {
                    $("#iframeExcel").attr("src", "https://docs.google.com/gview?url=" + url + "&embedded=true").height(400);

                    $("#divResult").html("<a id='aDownloadExcel' class='k-button k-primary bounceIn animated' href='" + url + "'>Download Excel</a>");
                    $("#aGenerateExcel").hide();
                    $("#aDownloadExcel").show();
                    var popupNotification = $("#popupNotification").data("kendoNotification");
                    popupNotification.show("Your file is ready! Click download to save it!", "info");
                }
            });

        }
        e.preventDefault();
    }
    $(document).ajaxComplete(function (event, request, settings) {
        $("#msg").append("<li>Request Complete.</li>");
    });


    function uploadComplete(e) {
        // The Upload is now idle
        $.ajax({
            url: "upload/getLastPdfUrl", success: function (url) {
                $("#iframePdf").attr("src", "https://docs.google.com/gview?url=" + url + "&embedded=true").height(400);
                $("#iframeExcel").attr("src", "");
                $("#aGenerateExcel").show();
                $("#aDownloadExcel").hide();
            }
        });
    }




</script>
<br />
<div class="row">
    <div class="col-md-6">
        <br />
        <div id="divSingleFile">
            <div class="alert alert-bordered">
                <!-- BORDERED -->
                <p><i class="ico-transparent ico-bordered et-upload"></i>Drop a PDF file here or click 'Select files...'</p>
            </div>

            @(Html.Kendo().Upload()
.Name("singleFile")
.Multiple(false)
.ShowFileList(true)
.DropZone("#divSingleFile")
.Events(e => e.Complete("uploadComplete"))
.Async(a => a
    .Save("ChunkSave", "Upload")
    .Remove("Remove", "Upload")
)
.Validation(v => v.AllowedExtensions("pdf"))
.Events(e => e.Error("onError"))
.Deferred()
            )
        </div>
        <br />
        @*@(Html.Kendo().Upload()
        .Name("directoryFiles")
        .Async(a => a
            .Save("ChunkSave", "Upload")
            .Remove("Remove", "Upload")
        )
        .Directory(true)
        .DirectoryDrop(true)
        .Validation(v => v.AllowedExtensions("pdf"))
        .Deferred()
        )*@

    </div>
    <div class="col-md-6">
        <br />
        <div id="divSingleFileOutput">
            <div class="alert alert-bordered">
                <p><i class="ico-transparent ico-bordered et-upload"></i>Optionally drop a XLSM file to render data or click 'Select files...'.</p>
            </div>
            @(Html.Kendo().Upload()
.Name("filesOutput")
.Multiple(false)
.DropZone("#divSingleFileOutput")
.ShowFileList(true)
.Async(a => a
    .Save("ChunkSaveOutput", "Upload")
    .Remove("Remove", "Upload")
)
.Validation(v => v.AllowedExtensions("xlsm"))
.Events(e => e.Error("onError"))
.Deferred()
            )
            </div>
        </div>
        
</div>
<hr />
<div >
    <div class="row">
        <div class="col-md-12 col-md-offset-5">
            <a id="aGenerateExcel" class="k-button center" style="float:none" onclick="DownloadExcelClick(event)">Generate Excel</a>

            <div id="divResult"></div>
        </div>
    </div>
</div>
<br />



<br />

<div class="alert alert-bordered">
    <p><i class="ico-transparent ico-bordered et-refresh"></i>Preview uploaded pdf.</p>
    <iframe id="iframePdf" src="" seamless='seamless' frameBorder="0" style="overflow:hidden;height:20px;width:100%">Browser not compatible.</iframe>
</div>
<br />
<div class="alert alert-bordered">   
    <p><i class="ico-transparent ico-bordered et-recycle"></i> Preview generated excel</p>
    <iframe id="iframeExcel" src="" seamless='seamless' frameBorder="0" style="overflow:hidden;height:20px;width:100%">Browser not compatible.</iframe>
</div>
<br />

<div id="divFiles" class="k-block" style="display:none">
    <div class="k-header k-success-colored">2. Download or delete already uploaded files.</div>
    @*@(Html.Kendo().Grid<AzureCloudFileViewModel>()
                .Name("gridFs")
                .Columns(columns =>
                {
                    columns.Bound(c => c.DirectoryName).Width(50).Title("Company");
                    columns.Bound(c => c.FileName).Width(100).Title("File");
                    columns.Bound(c => c.Extension).Width(20);
                    columns.Bound(c => c.Length).Width(30);
                    columns.Command(command => command.Destroy()).Width(50).Title("Delete");
                    columns.Template("<a href='/Grid/Download/?safeUri=#:SafeUri#' class='k-button'>Download</a>").Width(100).Title("Download");
                })
                .Groupable()
                .Sortable()
                .Filterable()
                .Resizable(r => r.Columns(true))
                .Excel(excel => excel
            .FileName("Files.xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Export", "Grid"))
        )
        .Pdf(p =>
        {
            p.ProxyURL(Url.Action("Export", "Grid"));
        })
                .ToolBar(t =>
                {
                    t.Excel();
                    t.Pdf();
                })
                .Pageable(s => s.Refresh(true))

                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("AzureFiles_Read", "Grid"))
                    .Destroy(destroy => destroy.Action("AzureFiles_Destroy", "Grid"))
                    .PageSize(2000)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(f => f.Uri);
                    })
                )
        )*@

</div>
<br />
<div id="divMappings" class="k-block" style="display:none">
    <div class="k-header k-success-colored">3. Mappings.</div>
    @*@(Html.Kendo().Grid<FinancialRow>()
                        .Name("gridBs")
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.Number).Width(50);
                            columns.Bound(c => c.Name).Width(100);
                            columns.Bound(c => c.GoesToRowNumberString).Width(50).Title("Goes To");
                            columns.Bound(c => c.GoesToRowTitle).Width(100).Title("Goes To Title");
                            columns.Bound(c => c.Sign).Width(50);
                            //columns.Bound(c => c.CurrentYear).Width(50);
                        })
                        .Groupable()
                        .Sortable()
                        .Filterable()
                                       .Excel(excel => excel
                                       .FileName("Files.xlsx")
                                       .Filterable(true)
                                       .ProxyURL(Url.Action("Export", "Grid")))
                                       .Pdf(p =>
                                       {
                                           p.ProxyURL(Url.Action("Export", "Grid"));
                                       })
                .ToolBar(t =>
                {
                    t.Excel();
                    t.Pdf();
                })
                .Pageable(s => s.Refresh(true))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("BsRows_Read", "Grid"))
                    .PageSize(2000)
                    .ServerOperation(false)
                )
        )*@
</div>
@(Html.Kendo().Notification()
    .Name("popupNotification")
    .Deferred()
)